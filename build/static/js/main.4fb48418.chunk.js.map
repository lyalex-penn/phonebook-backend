{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","Footer","style","footerStyle","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","console","log","noteService","initialNotes","length","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","target","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4fb48418.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({note, toggleImportance}) => {\r\n  const label = note.important\r\n      ? 'make not important'\r\n      : 'make important'\r\n\r\n  return (\r\n      <li className={'note'}>\r\n        {note.content}\r\n        <button onClick={toggleImportance}>{label}</button>\r\n      </li>\r\n\r\n  )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\n\r\nconst baseUrl = 'https://shielded-ridge-35119.herokuapp.com/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default {getAll, create, update}","import React from 'react';\r\n\r\nconst Notification = ({message}) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n      <div className={'error'}>\r\n        {message}\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Notification;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 16\r\n  }\r\n  return (\r\n      <div style={{footerStyle}}>\r\n        <br/>\r\n        <em>Note app, Department of Computer Science, University of Helsinki\r\n          2020</em>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Footer;","import React, {useEffect, useState} from 'react'\r\nimport Note from './components/Note'\r\nimport noteService from './services/notes'\r\nimport Notification from './components/Notification'\r\nimport Footer from './components/Footer'\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState('')\r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n  useEffect(() => {\r\n    console.log('effect')\r\n    noteService\r\n    .getAll()\r\n    .then(initialNotes => {\r\n      console.log('promise fulfilled')\r\n      setNotes(initialNotes)\r\n    })\r\n  }, [])\r\n  console.log('render', notes.length, 'notes')\r\n\r\n  const notesToShow = showAll\r\n      ? notes\r\n      : notes.filter(note => note.important)\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault()\r\n    console.log('button clicked', event.target)\r\n\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() < 0.5,\r\n    }\r\n\r\n    noteService\r\n    .create(noteObject)\r\n    .then(returnedNote => {\r\n      console.log(returnedNote)\r\n      setNotes(notes.concat(returnedNote))\r\n      setNewNote('') //this causes the 2nd render\r\n    })\r\n  }\r\n\r\n  const handleNoteChange = (event) => {\r\n    console.log(event.target.value)\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const toggleImportanceOf = (id) => {\r\n    const note = notes.find(n => n.id === id)\r\n    const changedNote = {...note, important: !note.important}\r\n\r\n    noteService\r\n    .update(id, changedNote)\r\n    .then(returnedNote => {\r\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n    })\r\n    .catch(error => {\r\n      // alert(`the note ${note.content} was already deleted from the server`)\r\n      setErrorMessage(\r\n          `Note '${note.content}' was already removed from the server`\r\n      )\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 5000)\r\n      setNotes(notes.filter(n => n.id !== id))\r\n    })\r\n  }\r\n\r\n  return (\r\n      <div>\r\n        <h1>Notes</h1>\r\n        <Notification message={errorMessage}/>\r\n        <div>\r\n          <button onClick={() => setShowAll(!showAll)}>\r\n            show {showAll ? 'important' : 'all'}\r\n          </button>\r\n        </div>\r\n        <ul>\r\n          {notesToShow.map((note) =>\r\n              <Note key={note.id}\r\n                    note={note}\r\n                    toggleImportance={() => toggleImportanceOf(note.id)}/>\r\n          )}\r\n        </ul>\r\n        <form onSubmit={addNote}>\r\n          <input\r\n              value={newNote}\r\n              onChange={handleNoteChange}/>\r\n          <button type=\"submit\">save</button>\r\n        </form>\r\n        <Footer/>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}